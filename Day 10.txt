                                             STACK-> Operations ->push,pop
1.Stack - Airport Baggage Handling System
import java.io.*;
import java.util.*;

public class Main {
    static class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    static class Stack {
        Node top;
        int size;

        Stack() { 
            top = null;
            size = 0;
        }

        void push(int x) {
            Node newNode = new Node(x);
            newNode.next = top;
            top = newNode;
            size++;
        }

        void pop() {
            if (top == null) {
                System.out.println("Stack Underflow");
            } else {
                top = top.next;
                size--;
            }
        }

        void top() {
            if (top != null) {
                System.out.println(top.data);
            } else {
                System.out.println("Stack Underflow");
            }
        }

        void isEmpty() {
            System.out.println(size == 0 ? "true" : "false");
        }

        void size() {
            System.out.println(size);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = Integer.parseInt(sc.nextLine());
        Stack stack = new Stack();
        for (int i = 0; i < n; i++) {
            String line = sc.nextLine();
            if (line.startsWith("Push")) { 
                int x = Integer.parseInt(line.substring(5));
                stack.push(x);
            } else if (line.equals("Pop")) {
                stack.pop(); 
            } else if (line.equals("Top")) {
                stack.top();
            } else if (line.equals("IsEmpty")) {
                stack.isEmpty(); 
            } else if (line.equals("Size")) {
                stack.size(); 
            }
        }
        
    }
}


//2.Stack - Library Book Management System

import java.io.*;
import java.util.*;

public class Main {
    static class Node {
        String data;
        Node next;

        Node(String d) {
            data = d;
            next = null;
        }
    }

    static class Stack {
        Node top;
        int size;

        Stack() { 
            top = null;
            size = 0;
        }

        void push(String x) { 
            Node newNode = new Node(x);
            newNode.next = top;
            top = newNode;
            size++;
        }

        void pop() {
            if (top == null) {
                System.out.println("Stack Underflow");
            } else {
                top = top.next;
                size--;
            }
        }

        void top() {
            if (top != null) {
                System.out.println(top.data);
            } else {
                System.out.println("Stack Underflow");
            }
        }

        void isEmpty() {
            System.out.println(size == 0 ? "true" : "false");
        }

        void size() {
            System.out.println(size);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = Integer.parseInt(sc.nextLine());
        Stack stack = new Stack();
        for (int i = 0; i < n; i++) {
            String line = sc.nextLine();
            if (line.startsWith("Push")) { 
                String x = line.substring(5);
                stack.push(x);
            } else if (line.equals("Pop")) {
                stack.pop(); 
            } else if (line.equals("Top")) {
                stack.top();
            } else if (line.equals("IsEmpty")) {
                stack.isEmpty(); 
            } else if (line.equals("Size")) {
                stack.size(); 
            }
        }
    }
}

3. Stack - Undo Operation in a Text Editor


import java.io.*;
import java.util.*;

class Node{
    char data;
    Node next;
    Node(char data){
        this.data=data;
        this.next=null;
    }
}
class Charstack{
    Node top;
    void push(char c){
        Node newNode=new Node(c);
        newNode.next=top;
        top=newNode;
    }
    char pop(){
        if(top==null)return'\0';
        char val=top.data;
        top=top.next;
        return val;
           
    }
    boolean isEmpty()
    {
        return top==null;
    }
}
public class Main
{
    public static void main(String []args)
    {
        Scanner sc=new Scanner(System.in);
        String input=sc.nextLine();
        Charstack stack=new Charstack();
        for(char c:input.toCharArray())
        {
            stack.push(c);
        }
        while(!stack.isEmpty())
        {
            System.out.print(stack.pop());
        }
    }
}


4.Stack - Smart Code Editor Bracket Validation System


import java.io.*;
import java.util.*;

class Node{
    char data;
    Node next;
    Node(char data){
        this.data=data;
        this.next=null;
    }
}
class Stack{
    Node top;
    void push(char c){
        Node newNode=new Node(c);
        newNode.next=top;
        top=newNode;
    }
    char pop(){
        if(isEmpty())return'\0';
        char val=top.data;
        top=top.next;
        return val;
    }
    char peek(){
        if(isEmpty())return'\0';
        return top.data;
    }
    boolean isEmpty(){
        return top==null;
    }
}
public class Main{
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        Stack stack=new Stack();
        boolean isValid=true;
        for(char c:s.toCharArray()){
            if(c=='('||c=='{'||c=='['){
                stack.push(c);
            }else{
                if(stack.isEmpty()){
                    isValid=false;
                    break;
                }
                char top=stack.pop();
                if((c==')' && top!='(')||
                  (c=='}' && top!='{')||
                  (c==']' && top!='[')){
                    isValid=false;
                    break;
                }
                    
            }
        }
        System.out.print(isValid&&stack.isEmpty());
    }
}

ZOHO:

import java.util.*;
public class Main{
  public static void main(String[]args)
  {
    Scanner sc=new Scanner(System.in);
    if(System.out.append("Ice")==null)
    {
      System.out.print("Ice");
      
    }
    else{
      System.out.print("cream");
    }
  }
}


1.GAP SUM    (I/P: N=9   A[]=1 2 3 4 5 6 7 8 9  GAP=3   O/P :12 15 18 )    


import java.util.*;
public class Main{
  public static void main(String[]args)
  {
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    int k=0;
    int a[]=new int[n];
    for(int i=0;i<n;i++)
    {
      a[i]=sc.nextInt();
      
    }
    int sum=0;
    int gap=sc.nextInt();
    int c=gap;
    while(c>0){
        sum=0;
    for(int i=k;i<n;i+=gap){
        sum=sum+a[i];
    }
    System.out.print(sum+" ");
    k++;
    c--;
  }}
}


2.Missing and repeating(IP:5  1 2 1 3 4  OP:Missing:5   Repeating:1)(ZOHO)


import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int[] count = new int[n + 1]; 
        int missing = -1, repeating = -1;
        for (int i = 0; i < n; i++) {
            count[arr[i]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (count[i] == 0) {
                missing = i;
            } else if (count[i] == 2) {
                repeating = i;
            }
        }
        System.out.println("Missing: " + missing);
        System.out.println("Repeating: " + repeating);
    }
}

