1.Reversal of Largest factorial 

I/P:4 

Logic:

Largest factorial<=4 is 2!->remaining=22
Again 2!->remaining=0
concatenated=22
reverse=22

O/P:22

import java.util.*;
public class Main 
{
    public static void main(String[]args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();//3
        int ans=0,rev=0;
        int a[]=new int[9];
        a[0]=1;
        for(int i=1;i<a.length;i++)
        {
            a[i]=a[i-1]*i;  //1 2 6 24 120 720 5040 40320
        }
        for(int i=a.length-1;i>=0;)
        {
            if(a[i]>n)//3
            {
                i--;      // 1 1 2 6 24 120.....
            }
            else{
                while(a[i]<=n)
                {
                    ans=ans*10+i;//2// 21
                    n=n-a[i];//1 // 0
                }
                if(n==0)
                {
                    break;
                }
            }
        }
        for(int i=ans;i>0;rev=rev*10+(i%10),i=i/10);  // 12 is the output
        System.out.print(rev);
    }
}


2.Pairs
I/P :9
10 20 20 10 10 30 50 10 20

LOGIC:

Process: of count of each color: 10->4 socks->2 Pairs
20->3 socks->1 Pairs
Total=2+1=3 pairs

O/P:3 pairs

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] socks = new int[n];
        // Read all socks
        for(int i = 0; i < n; i++) {
            socks[i] = sc.nextInt();
        }
        int pairs = 0;
        // Count pairs
        for(int i = 0; i < n; i++) {
            int count = 1; // count current sock
            if(socks[i] != -1) { // -1 means already paired
                for(int j = i + 1; j < n; j++) {
                    if(socks[i] == socks[j]) {
                        count++;
                        socks[j] = -1; // mark as paired
                    }
                }
                pairs += count / 2; // add number of pairs for this color
            }
        }
        System.out.println(pairs);
    }
}

3.Uphill and Downhill    ip:8    
                        UDDDUDUU  (where U=+1 and D=-1){-1 to 0)


                      op:1


import java.util.*;
public class Main 
{
    public static void main(String[]args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        String s=sc.next();
        int altitude=0,valleys=0;
        for(char c:s.toCharArray())
        {
          if(c=='U')
          {
            altitude++;
          }
          else
          altitude--;
          if(altitude==0 &&c=='U')
          valleys++;
        }
        System.out.println(valleys);
}
}

4.i/p:6       1 2 4 4 4 5


o/p:4(because it has maximum frequency)

import java.util.*;
public class Main{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        int count=0,max=0,k=0;
        for(int i=0;i<n-1;i++){
            count=1;
            for(int j=i+1;j<n;j++){
                if(a[i]==a[j]){
                    count++;
                }
            }
            if(count>max){
                max=count;
                k=a[i];
            }
        }
        System.out.print(k);
    }
}

5.i/p->4   7 5 9 6    o/p->7(subtract all the elements by minimum no and print its sum)
 min=5  diff:(7-5)+(5-5)+(9-5)+(6-5) = 2+0+4+1 = 7


import java.util.*;
public class Main{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        int min=0,sum=0;
        for(int i=0;i<n-1;i++)
        {
                if(a[i]<a[i+1]){
                    min=a[i];
                }
            }
          for(int i=0;i<n;i++)
          {
              int r=a[i]-min;
              sum+=r;
          }
        System.out.print(sum);
    }
}