1. Binary Search Tree - Efficient Book Search in a Digital Library

import java.io.*;
import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int x) {
        val = x;
    }
}
public class Main {
    public static TreeNode insert(TreeNode root, int val) {
        if (root == null)
            return new TreeNode(val);
        if (val < root.val)
            root.left = insert(root.left, val);
        else
            root.right = insert(root.right, val);
        return root;
    }
    public static TreeNode search(TreeNode root, int val) {
        if (root == null)
            return null; // Corrected this line
        if (val < root.val)
            return search(root.left, val);
        else if (val > root.val)
            return search(root.right, val);
        else
            return root; // Return the node if found
    }
    public static void inorder(TreeNode root) {
        if (root == null) return;
        inorder(root.left);
        System.out.print(root.val + " ");
        inorder(root.right);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        TreeNode root = null;
        for (int i = 0; i < n; i++) {
            int val = sc.nextInt();
            root = insert(root, val);
        }
        int searchVal = sc.nextInt();
        TreeNode found = search(root, searchVal);
        if (found != null) {
            System.out.println("Book found! Subtree rooted at " + found.val + ":");
            inorder(found);
        } else {
            System.out.println("Book not found");
        }
    }
}


2.Binary Search Tree - Finding the Kth Smallest Book ID in a Digital Library


import java.util.*;
class Node {
    int data;
    Node left, right;

    Node(int val) {
        data = val;
        left = right = null;
    }
}
public class Main {
    static int count = 0;
    static int result = -1;
    static Node insert(Node root, int val) {
        if (root == null) return new Node(val);
        if (val < root.data) root.left = insert(root.left, val);
        else root.right = insert(root.right, val);
        return root;
    }
    static void inorder(Node root, int k) {
        if (root == null || result != -1) return;
        inorder(root.left, k);
        count++;
        if (count == k) {
            result = root.data;
            return;
        }
        inorder(root.right, k);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = Integer.parseInt(sc.nextLine());
        String[] values = sc.nextLine().split(" ");
        int k = Integer.parseInt(sc.nextLine());
        Node root = null;
        // Insert all nodes first
        for (int i = 0; i < n; i++) {
            int val = Integer.parseInt(values[i]);
            root = insert(root, val);
        }
        // Perform inorder traversal only once to find kth smallest
        inorder(root, k);
        if (result != -1) {
            System.out.println(result);
        } else {
            System.out.println("K is out of range");
        }
    }
}



3.Binary Search Tree - Finding the Cheapest Product


import java.util.*;
class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) {
        val = x;
    }
}
public class Main {
    public static TreeNode insert(TreeNode root, int val) {
        if (root == null)
            return new TreeNode(val);
        if (val < root.val)
            root.left = insert(root.left, val);
        else
            root.right = insert(root.right, val);
        return root;
    }
    public static int findMin(TreeNode root) {
        if (root == null) {
            throw new NoSuchElementException("The tree is empty");
        }
        TreeNode current = root;
        while (current.left != null) {
            current = current.left; // Traverse to the leftmost node
        }
        return current.val; // Return the minimum value
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        TreeNode root = null;
        for (int i = 0; i < n; i++) {
            int val = sc.nextInt();
            root = insert(root, val);
        }
        int minPrice = findMin(root);
        System.out.println(minPrice);
    }
}


4. Binary Search Tree - Loan Repayment Verification System


import java.util.*;
class Node {
    int data;
    Node left, right;
    Node(int data) {
        this.data = data;
    }
}
class BST {
    Node root;
    Node insert(Node root, int data) {
        if (root == null) return new Node(data);
        if (data < root.data) {
            root.left = insert(root.left, data); // Corrected this line
        } else {
            root.right = insert(root.right, data); // Corrected this line
        }
        return root;
    }
    boolean hasPathSum(Node root, int sum) {
        if (root == null) return false;
        if (root.left == null && root.right == null) return sum == root.data;
        return hasPathSum(root.left, sum - root.data) || hasPathSum(root.right, sum - root.data); // Corrected this line
    }
}
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        BST tree = new BST();
        for (int i = 0; i < n; i++) {
            tree.root = tree.insert(tree.root, sc.nextInt()); // Corrected this line
        }
        int targetSum = sc.nextInt();
        System.out.println(tree.hasPathSum(tree.root, targetSum));
    }
}


5.Graph - City Transport Network


import java.util.*;
class Node{
    int id;
    Node(int id)
    {
        this.id=id;
    }
}
public class Main{
    public static void main(String[]args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int m=sc.nextInt();
        Node[] nodes=new Node[n];
        for(int i=0;i<n;i++)
        {
            nodes[i]=new Node(i+1);
        }
        int[][]matrix=new int[n][n];
        for(int i=0;i<m;i++)
        {
            int u=sc.nextInt();
            int v=sc.nextInt();
            matrix[u-1][v-1]=1;
        }
        for(int i=0;i<n;i++)
        {
          for(int j=0;j<n;j++)
        {
              System.out.print(matrix[i][j]+" ");
        }
            System.out.println();
        }
    }
}