1.Contains Duplicate  (Leetcode Qno:217)

Input: nums = [1,2,3,1]
Output: true

class Solution
{
    public boolean containsDuplicate(int[] nums) 
    {
        int n=nums.length;
        Arrays.sort(nums);
    for(int i=0;i<n-1;i++)   
    {
        if(nums[i]==nums[i+1])
            return true;
    }
    return false;
    }
}

2. Same Tree(Leetcode Qno:100)

Input: p = [1,2,3], q = [1,2,3]
Output: true
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null)return true;
        if(p==null || q==null)return false;
        return p.val==q.val && isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
    }
}


3.Intersection of Two Linked Lists(Leetcode Qno:160 )

Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode a=headA,b=headB;
        while(a!=b)
        {
            a=(a==null)? headB : a.next;
            b=(b==null)? headA : b.next;
        }
        return a;
    }
}





4. Palindrome Number(Leetcode Qno:9 )
Input: x = 121
Output: true

class Solution {
    public boolean isPalindrome(int x) {
        if(x<0 || (x!=0 && x%10==0))
            return false;
        int rev=0;
        while(x>rev)
        {
            rev=rev*10 + x%10;
            x=x/10;
        }
        return(x==rev || x==rev/10);   
    }
}


5.Implement Stack using Queues(Leetcode Qno:225 )

["MyStack", "push", "push", "top", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]


class Solution {
    public boolean uni(TreeNode root, int val) {
        if(root==null) return true;
        if(root.val!=val) return false;
        boolean l=uni(root.left, val);
        boolean r=uni(root.right, val);
        return (l && r);
    }
    public boolean isUnivalTree(TreeNode root)
    {
        int val=root.val;
        return uni(root,val);
    }
}
class MyStack {
    private Queue<Integer> q;
    public MyStack() {
        q= new LinkedList<>();
    }
    public void push(int x) {
        q.add(x);
        for(int i=0;i<q.size()-1;i++)
        q.add(q.poll());
    }
    public int pop() {
        return q.poll();
    }
    public int top() {
        return q.peek();
    }
    public boolean empty() {
        return q.isEmpty();
    }
}


6.Reverse Integer (Leetcode Qno:7 )

Input: x = 123
Output: 321

class Solution
{
public int reverse(int x)
{
    int result = 0;
    while (x != 0)
    {
        int tail = x % 10;
        int newResult = result * 10 + tail;
        if ((newResult - tail) / 10 != result)
        { return 0; }
        result = newResult;
        x = x / 10;
    }
    return result;
}
}
