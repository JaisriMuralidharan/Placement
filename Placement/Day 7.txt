1. Linear search
import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        int ele=sc.nextInt();
        for(int i=0;i<n;i++){
            if(a[i]==ele){
                System.out.print(i);
                break;
            }
        }
    }
}

2.Binary search
import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        int ele=sc.nextInt();
        int low=a[0],high=a[n-1];
        while(low<=high){
        int mid=(low+high)/2;
        if(a[mid]==ele){
            System.out.print(mid);
            break;
        }
        else if(ele>a[mid]){
            low=mid+1;
        }else{
            high=mid-1;
        }}
    }
}

3.Timestamp that prints the index of elements matched
import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        int flag=0;
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        int b[]=new int[5];
        int k=0;
        int ele=sc.nextInt();
        for(int i=0;i<n;i++){
            if(a[i]==ele){
                flag=1;
                b[k]=i;
                k++;
            }
        }
        if (flag==1){
            System.out.print("[");
            for(int i=0;i<k;i++){
                if(i!=k-1)
                System.out.print(b[i]+",");
                else if(i==k-1)
                System.out.print(b[i]);
            }
            System.out.print("]");
        }else{
            System.out.print("[-1,-1]");
        }
    }
}

4.Bubble sort 
import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(a[i]>a[j]){
                    int temp=a[i];
                    a[i]=a[j];
                    a[j]=temp;
                }
            }
        }
        for(int i=0;i<n;i++){
            System.out.print(a[i]);
        }
    }
}

5.Selection sort 
import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int i=0,j=0;
        int a[]=new int[n];
        for(i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        int index=0;
        for(i=0;i<n;i++){
            index=i;
            for(j=i+1;j<n;j++){
                if(a[index]>a[j])
                index=j;
            }
            int temp=a[i];
            a[i]=a[index];
            a[index]=temp;
        }
        for(i=0;i<n;i++){
            System.out.print(a[i]);
        }
    }
}

6.merge sort
public class Main
{
    void fun(int n)
    {
        if(n>=1)
        {
            fun(n-1);
              fun(n-2);
              fun(n-3);
            System.out.print(n+ " ");
           
        }
    }
    public static void main(String[] args)
    {
        Main m = new Main();
        m.fun(3);
    }
}


7.Merge Sort
import java.util.Arrays;

// Merge sort in Java

class Main {

  // Merge two sub arrays L and M into array
  void merge(int array[], int p, int q, int r) {

    int n1 = q - p + 1;
    int n2 = r - q;

    int L[] = new int[n1];
    int M[] = new int[n2];

    // fill the left and right array
    for (int i = 0; i < n1; i++)
      L[i] = array[p + i];
    for (int j = 0; j < n2; j++)
      M[j] = array[q + 1 + j];

    // Maintain current index of sub-arrays and main array
    int i, j, k;
    i = 0;
    j = 0;
    k = p;

    // Until we reach either end of either L or M, pick larger among
    // elements L and M and place them in the correct position at A[p..r]
    // for sorting in descending
    // use if(L[i] >= <[j])
    while (i < n1 && j < n2) {
      if (L[i] <= M[j]) {
        array[k] = L[i];
        i++;
      } else {
        array[k] = M[j];
        j++;
      }
      k++;
    }

    // When we run out of elements in either L or M,
    // pick up the remaining elements and put in A[p..r]
    while (i < n1) {
      array[k] = L[i];
      i++;
      k++;
    }

    while (j < n2) {
      array[k] = M[j];
      j++;
      k++;
    }
  }

  // Divide the array into two sub arrays, sort them and merge them
  void mergeSort(int array[], int left, int right) {
    if (left < right) {

      // m is the point where the array is divided into two sub arrays
      int mid = (left + right) / 2;

      // recursive call to each sub arrays
      mergeSort(array, left, mid);
      mergeSort(array, mid + 1, right);

      // Merge the sorted sub arrays
      merge(array, left, mid, right);
    }
  }

  public static void main(String args[]) {

    // created an unsorted array
    int[] array = { 6, 5, 12, 10, 9, 1 };

    Main ob = new Main();

    // call the method mergeSort()
    // pass argument: array, first index and last index
    ob.mergeSort(array, 0, array.length - 1);

    System.out.println("Sorted Array:");
    System.out.println(Arrays.toString(array));
  }
}

//8.Quick sort


import java.util.*;

class Main {

  // method to find the partition position
  static int partition(int array[], int low, int high) {
    
    // choose the rightmost element as pivot
    int pivot = array[high];
    
    // pointer for greater element
    int i = (low - 1);

    // traverse through all elements
    // compare each element with pivot
    for (int j = low; j < high; j++) {
      if (array[j] <= pivot) {

        // if element smaller than pivot is found
        // swap it with the greater element pointed by i
        i++;

        // swapping element at i with element at j
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
      }

    }

    // swap the pivot element with the greater element specified by i
    int temp = array[i + 1];
    array[i + 1] = array[high];
    array[high] = temp;

    // return the position from where partition is done
    return (i + 1);
  }

  static void quickSort(int array[], int low, int high) {
    if (low < high) {

      // find pivot element such that
      // elements smaller than pivot are on the left
      // elements greater than pivot are on the right
      int pi = partition(array, low, high);
      
      // recursive call on the left of pivot
      quickSort(array, low, pi - 1);

      // recursive call on the right of pivot
      quickSort(array, pi + 1, high);
    }
  }

  public static void main(String args[]) {

    int[] data = { 8, 7, 2, 1, 0, 9, 6 };
    System.out.println("Unsorted Array");
    System.out.println(Arrays.toString(data));

    int size = data.length;

    // call quicksort() on array data
    quickSort(data, 0, size - 1);

    System.out.println("Sorted Array in Ascending Order ");
    System.out.println(Arrays.toString(data));
  }
}

9.Smart Library: Finding Books with Binary Search

import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int flag=0;
        int a[]=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        int ele=sc.nextInt();
        for(int i=0;i<n;i++){
            if(ele==a[i]){
                System.out.print(i);
                flag=1;
                break;
            }
        }
        if(flag==0){
            System.out.print("-1");
        }
    }
}


10.Odd Count Detector in a Given Range

import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int l=sc.nextInt();
        int h=sc.nextInt();
        int count=0;
        for(int i=l;i<=h;i++)
        {
            if(i%2!=0)
            {
                count++;
            }
        }
        System.out.print(count);
    }
}


11.Collections Framework -getting elements from user 

ArrayList

import java.util.*;
public class Main
{
    public static void main(String[] args) {
        ArrayList l=new ArrayList();
        l.add(1);
        l.add(2);
        l.add("hi");
        l.add("jaisri");
        l.remove(0);
        System.out.print(l);
    }
}

